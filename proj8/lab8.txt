Bonnie Liu
005300989
Assignment 8
Lab
------------

I obtained a copy of the Git repository by anonymously cloning. I found this
command on the main Savannah repository.
$ git clone https://git.savannah.gnu.org/git/diffutils.git

Next, I switched into the diffutils directory, obtained a log of changes to
Diffutils' master branch, and piped the result into the file git-log.txt.
$ cd diffutils
$ git log > git-log.txt

Then I obtained a list of tags used for Diffutils and put it into a file.
$ git tag > git-tags.txt

In order to find the commit titled "maint: quote 'like this' or "like this", not
`like this'", I opened up git-log.txt in vim and searched for the title:
$ vim git-log.txt
/maint: quote 'like this' or "like this"

I received the following information:
commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Author: Paul Eggert <eggert@cs.ucla.edu>
Date:   Wed Jan 25 23:46:16 2012 -0800

I then used the hash to generate a patch for that commit. Upon doing some online
research, I found that git format-patch -1 <sha> patches 1 commit and --stdout
prints out the commit so that I can pipe it into quote-patch.txt
$ git format-patch -1 --stdout 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt

To checkout version 3.0 of Diffutils from my repository, I typed the following:
$ git checkout v3.0
Note: checking out 'v3.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 022cd5c... version 3.0

Next, I applied quote-patch.txt to version 3.0, and I typed RETURN for the cases
it cannot figure out what file to patch. These problems likely originated because
we applied the patch on an earlier version of the code.
$ patch -p1 < quote-patch.txt

These were the errors I got:
can't find file to patch at input line 62

Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej

Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej

Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej

can't find file to patch at input line 249

can't find file to patch at input line 262

Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej

Hunk #6 FAILED at 433.
1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej

To get an overview of what happened, I typed
$ git status
# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   NEWS
#       modified:   README
#       modified:   TODO
#       modified:   doc/diagmeet.note
#       modified:   ms/config.bat
#       modified:   ms/config.site
#       modified:   po/en.po
#       modified:   src/analyze.c
#       modified:   src/cmp.c
#       modified:   src/context.c
#       modified:   src/diff.c
#       modified:   src/diff.h
#       modified:   src/diff3.c
#       modified:   src/dir.c
#       modified:   src/ifdef.c
#       modified:   src/io.c
#       modified:   src/sdiff.c
#       modified:   src/side.c
#       modified:   src/system.h
#       modified:   src/util.c
#       modified:   tests/help-version
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       NEWS.orig
#       README-hacking.orig
#       README-hacking.rej
#       README.orig
#       README.rej
#       cfg.mk.orig
#       cfg.mk.rej
#       git-log.txt
#       git-tags.txt
#       ms/config.site.orig
#       quote-patch.txt
#       src/cmp.c.orig
#       src/context.c.orig
#       src/diff.c.orig
#       src/diff.c.rej
#       src/diff.h.orig
#       src/diff3.c.orig
#       src/diff3.c.rej
#       src/dir.c.orig
#       src/sdiff.c.orig
#       src/system.h.orig
#       src/util.c.orig
#       tests/help-version.orig
no changes added to commit (use "git add" and/or "git commit -a")

This means that some of these files, such as NEWS, README, and TODO are not staged
for commit.

Upon doing some research, I found that vc-diff (C-x v =) is used to compare the
work files in the current version control fileset with the versions I started
from. vc-revert (C-x v u) is used to revert the work file(s) in the current
version control fileset to the last revision.

I switched into the *vc-diff* buffer by typing the following:
$ emacs quote-patch.txt
M-x diff-mode

From there, I changed to describe mode:
C-h m

This opened a new window, and I searched for diff-apply-hunk and diff-goto-source:
C-x o
C-s diff-apply-hunk
C-s diff-goto-source

Some of the diff commands shown in this window were:
C-c C-a         diff-apply-hunk
C-c C-b         diff-refine-hunk
C-c C-c         diff-goto-source
C-c C-d         diff-unified->context
C-c C-e         diff-ediff-patch
C-c C-f         next-error-follow-minor-mode
C-c C-n         diff-restrict-view
C-c C-r         diff-reverse-direction
C-c C-s         diff-split-hunk
C-c C-t         diff-test-hunk
C-c C-u         diff-context->unified
C-c C-w         diff-ignore-whitespace-hunk

After more research, I found that diff-apply-hunk (C-c C-a) applies this hunk to
its target file. diff-goto-source (C-c C-c) goes to the source file and line
corresponding to this hunk. By default, this jumps to the "new" version of the
file.

In order to revert all the changes other than .c files, I opened each non-.c file
using emacs, typed C-x v u to revert, and lastly closed the file:
$ emacs <file>
C-x v u
Discard changes in 1 file? (yes or no) yes
C-x C-c

This is the list of the non-.c files that I reverted changes to:
NEWS
README
TODO
doc/diagmeet.note
ms/config.bat
ms/config.site
po/en.po
src/diff.h
src/system.h
tests/help-version

For the .c files, we want to undo all the changes other than changes to character
string constants since the character-string changes are the only changes that we
want. I used the vc-diff command to compare each work file in the current VC
fileset. Then I navigated through the changes and unapplied the hunk only on
comments. Finally, I exited each file and saved changes.
$ emacs <file>
C-x v =
C-u C-c C-a (NOTE: I only ran this command on comments.)
C-x C-c
Save file /u/cs/ugrad/bonniel/Desktop/CS35L/Assignment8/diffutils/src/context.c?
(y, n, !, ., q, C-r, d or C-h) y

This is the list of .c files I undid changes to:
src/analyze.c
src/cmp.c
src/context.c
src/diff.c
src/diff3.c
src/dir.c
src/ifdef.c
src/io.c
src/sdiff.c
src/side.c
src/util.c

Next, I typed the following to examine the files in src/*.c.rej.
$ ls src/*.c.rej
src/diff3.c.rej  src/diff.c.rej

I vimmed into each of these files:
$ cd src
$ vim diff.c.rej
--- src/diff.c
+++ src/diff.c
@@ -876,7 +876,7 @@
   N_("-T, --initial-tab             make tabs line up by prepending a tab"),
   N_("    --tabsize=NUM             tab stops every NUM (default 8) print columns"),
   N_("    --suppress-blank-empty    suppress space or tab before empty output lines"),
-  N_("-l, --paginate                pass output through `pr' to paginate it"),
+  N_("-l, --paginate                pass output through 'pr' to paginate it"),
   "",
   N_("-r, --recursive                 recursively compare any subdirectories found"),
   N_("    --no-dereference            don't follow symbolic links"),
@@ -906,13 +906,13 @@
   N_("    --binary                    read and write data in binary mode"),
 #endif
   "",
-  N_("-D, --ifdef=NAME                output merged file with `#ifdef NAME' diffs"),
+  N_("-D, --ifdef=NAME                output merged file with '#ifdef NAME' diffs"),
   N_("    --GTYPE-group-format=GFMT   format GTYPE input groups with GFMT"),
   N_("    --line-format=LFMT          format all input lines with LFMT"),
   N_("    --LTYPE-line-format=LFMT    format LTYPE input lines with LFMT"),
   N_("  These format options provide fine-grained control over the output\n"
      "    of diff, generalizing -D/--ifdef."),
-  N_("  LTYPE is `old', `new', or `unchanged'.  GTYPE is LTYPE or `changed'."),
+  N_("  LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'."),
   N_("  GFMT (only) may contain:\n\
     %<  lines from FILE1\n\
     %>  lines from FILE2\n\
@@ -942,9 +942,9 @@
   N_("    --help               display this help and exit"),
   N_("-v, --version            output version information and exit"),
   "",
-  N_("FILES are `FILE1 FILE2' or `DIR1 DIR2' or `DIR FILE...' or `FILE... DIR'."),
+  N_("FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'."),
   N_("If --from-file or --to-file is given, there are no restrictions on FILE(s)."),
-  N_("If a FILE is `-', read standard input."),
+  N_("If a FILE is '-', read standard input."),
   N_("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."),
   0
};
$ vim diff3.c.rej
--- src/diff3.c
+++ src/diff3.c
@@ -433,7 +433,7 @@
   N_("-3, --easy-only             like -e, but incorporate only nonoverlapping changes"),
   N_("-x, --overlap-only          like -e, but incorporate only overlapping changes"),
   N_("-X                          like -x, but bracket conflicts"),
-  N_("-i                          append `w' and `q' commands to ed scripts"),
+  N_("-i                          append 'w' and 'q' commands to ed scripts"),
   "",
   N_("-m, --merge                 output actual merged file, according to\n"
      "                                -A if no other options are given"),

Then I went into diff3.c and diff.c and manually changed these rejected patches
so that the `s became 's, unless the `s were found in comments.
$ vim diff.c
# I changed all occurrences of `s into 's unless they were found in comments.
$ vim diff3.c
# I changed all occurrences of `s into 's unless they were found in comments.
$ cd ..

After this, the spec says to remove all untracked files that git status warns me
about since I don't plan on adding any files in my patch.
$ git status

These are my untracked files that I got from the git status command:
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       NEWS.orig
#       README-hacking.orig
#       README-hacking.rej
#       README.orig
#       README.rej
#       cfg.mk.orig
#       cfg.mk.rej
#       git-log.txt
#       git-tags.txt
#       ms/config.site.orig
#       quote-patch.txt
#       src/cmp.c.orig
#       src/context.c.orig
#       src/diff.c.orig
#       src/diff.c.rej
#       src/diff.h.orig
#       src/diff3.c.orig
#       src/diff3.c.rej
#       src/dir.c.orig
#       src/sdiff.c.orig
#       src/system.h.orig
#       src/util.c.orig
#       tests/help-version.orig

In order to remove these untracked files, I used the git clean -f command since -f
stands for --force. If I didn't include -f, Git would have refused to modify
untracked nested git repositories. Prior to doing so, however, I made sure to move
the files I need for submission into another directory:
$ mv git-log.txt /u/cs/ugrad/bonniel/Desktop/CS35L/Assignment8
$ mv quote-patch.txt /u/cs/ugrad/bonniel/Desktop/CS35L/Assignment8
$ mv git-tags.txt /u/cs/ugrad/bonniel/Desktop/CS35L/Assignment8
$ git clean -f

Following the directions in the spec, I typed the following commands:
$ git status
# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   src/cmp.c
#       modified:   src/diff.c
#       modified:   src/diff3.c
#       modified:   src/dir.c
#       modified:   src/sdiff.c
#       modified:   src/util.c
#
no changes added to commit (use "git add" and/or "git commit -a")
$ git diff > quote-3.0-patch.txt
$ wc -l quote-3.0-patch.txt
326 quote-3.0-patch.txt

Indeed, git status reported 6 modified files, and my quote-3.0-patch.txt was
between 300 and 400 lines.

Next, I vimmed into README-hacking, copied down all the commands except CVS listed
inside the file, exited vim, and typed them in terminal.
$ ./bootstrap
$ vim patch
# I copied the contents of the additional patch mentioned in the spec into the
# file patch. Then I exited vim.
$ patch -p0 < patch
$ ./configure
$ make
$ make check

I got the following errors:
/bin/sh: /bin/sh: cannot execute binary file
make[3]: *** [basic.log] Error 126
make[3]: Leaving directory `/w/home.25/cs/ugrad/bonniel/Desktop/CS35L/diffutils/tests'
make[2]: *** [check-TESTS] Error 2
make[2]: Leaving directory `/w/home.25/cs/ugrad/bonniel/Desktop/CS35L/diffutils/tests'
make[1]: *** [check-am] Error 2
make[1]: Leaving directory `/w/home.25/cs/ugrad/bonniel/Desktop/CS35L/diffutils/tests'
make: *** [check-recursive] Error 1
On Piazza, the instructors said this was fine as long as I recorded the errors,
so I moved on.

I verified that Diffutils did the right thing with the diff . - scenario by typing
the following commands:
$ cd src
$ diff . -
diff: cannot compare '-' to a directory
$ diff --help
Usage: diff [OPTION]... FILES
Compare FILES line by line.

Mandatory arguments to long options are mandatory for short options too.
      --normal                  output a normal diff (the default)
  -q, --brief                   report only when files differ
  -s, --report-identical-files  report when two files are the same
  -c, -C NUM, --context[=NUM]   output NUM (default 3) lines of copied context
  -u, -U NUM, --unified[=NUM]   output NUM (default 3) lines of unified context
  -e, --ed                      output an ed script
  -n, --rcs                     output an RCS format diff
  -y, --side-by-side            output in two columns
  -W, --width=NUM               output at most NUM (default 130) print columns
      --left-column             output only the left column of common lines
      --suppress-common-lines   do not output common lines

  -p, --show-c-function         show which C function each change is in
  -F, --show-function-line=RE   show the most recent line matching RE
      --label LABEL             use LABEL instead of file name
                                  (can be repeated)

  -t, --expand-tabs             expand tabs to spaces in output
  -T, --initial-tab             make tabs line up by prepending a tab
      --tabsize=NUM             tab stops every NUM (default 8) print columns
      --suppress-blank-empty    suppress space or tab before empty output lines
  -l, --paginate                pass output through 'pr' to paginate it

  -r, --recursive                 recursively compare any subdirectories found
      --no-dereference            don't follow symbolic links
  -N, --new-file                  treat absent files as empty
      --unidirectional-new-file   treat absent first files as empty
      --ignore-file-name-case     ignore case when comparing file names
      --no-ignore-file-name-case  consider case when comparing file names
  -x, --exclude=PAT               exclude files that match PAT
  -X, --exclude-from=FILE         exclude files that match any pattern in FILE
  -S, --starting-file=FILE        start with FILE when comparing directories
      --from-file=FILE1           compare FILE1 to all operands;
                                    FILE1 can be a directory
      --to-file=FILE2             compare all operands to FILE2;
                                    FILE2 can be a directory

  -i, --ignore-case               ignore case differences in file contents
  -E, --ignore-tab-expansion      ignore changes due to tab expansion
  -Z, --ignore-trailing-space     ignore white space at line end
  -b, --ignore-space-change       ignore changes in the amount of white space
  -w, --ignore-all-space          ignore all white space
  -B, --ignore-blank-lines        ignore changes where lines are all blank
  -I, --ignore-matching-lines=RE  ignore changes where all lines match RE

  -a, --text                      treat all files as text
      --strip-trailing-cr         strip trailing carriage return on input

  -D, --ifdef=NAME                output merged file with '#ifdef NAME' diffs
      --GTYPE-group-format=GFMT   format GTYPE input groups with GFMT
      --line-format=LFMT          format all input lines with LFMT
      --LTYPE-line-format=LFMT    format LTYPE input lines with LFMT
    These format options provide fine-grained control over the output
      of diff, generalizing -D/--ifdef.
    LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'.
    GFMT (only) may contain:
      %<  lines from FILE1
      %>  lines from FILE2
      %=  lines common to FILE1 and FILE2
      %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
        LETTERs are as follows for new group, lower case for old group:
          F  first line number
          L  last line number
          N  number of lines = L-F+1
          E  F-1
          M  L+1
      %(A=B?T:E)  if A equals B then T else E
    LFMT (only) may contain:
      %L  contents of line
      %l  contents of line, excluding any trailing newline
      %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
    Both GFMT and LFMT may contain:
      %%  %
      %c'C'  the single character C
      %c'\OOO'  the character with octal code OOO
      C    the character C (other characters represent themselves)

  -d, --minimal            try hard to find a smaller set of changes
      --horizon-lines=NUM  keep NUM lines of the common prefix and suffix
      --speed-large-files  assume large files and many scattered small changes

      --help               display this help and exit
  -v, --version            output version information and exit

FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.
If --from-file or --to-file is given, there are no restrictions on FILE(s).
If a FILE is '-', read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

Report bugs to: bug-diffutils@gnu.org
GNU diffutils home page: <http://www.gnu.org/software/diffutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>

Both of these results used apostrophes instead of tick marks, so the patch worked.

Next, I attempted to do a sanity test using the modified version of Diffutils that
I just built. I typed in the following commands to obtain the source code of
Diffutils 3.0:
$ cd ..
$ cd ..
$ git clone https://git.savannah.gnu.org/git/diffutils.git diffutils-3.0
$ cd diffutils-3.0
$ git checkout 'v3.0'
$ cd src
$ mv *.c ..
$ cd ..

Then I manually removed all the non-.c files and directories from diffutils-3.0,
using rm on regular files and rm -rf on directories. Next, I typed in the
following commands to obtain the source code of my modified version of Diffutils.
$ cd ..
$ mkdir diffutils-3.0-patch
$ cp diffutils/src/*.c diffutils-3.0-patch

I then switched into each directory (both diffutils-3.0 and diffutils-3.0-patch)
and made sure that they had the same .c files. After setting up the two
directories correctly, I ran my implementation of diff with the command in my
CS35L folder:
$ diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt

I then vimmed into quote-3.0-test.txt to double check the diff file was properly
created. After that, I used diff to compare the contents of quote-3.0-test.txt
and quote-3.0-patch.txt:
$ diffutils/src/diff quote-3.0-test.txt quote-3.0-patch.txt

For the most part, the files were identical with the exception of trivial
differences, such as the one listed below:
< --- diffutils-3.0/util.c      2020-05-28 12:49:02.498547000 -0700
< +++ diffutils-3.0-patch/util.c        2020-05-28 12:46:08.288459000 -0700

These differences were likely caused by the fact that the files are located in
different directories.
